import hashlib
import time

class Block:
    def __init__(self, index, previous_hash, data):
        self.index = index
        self.timestamp = time.time()
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        value = str(self.index) + str(self.timestamp) + self.data + self.previous_hash
        return hashlib.sha256(value.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]

    def create_genesis_block(self):
        return Block(0, "0", "Genesis Block")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_data):
        latest_block = self.get_latest_block()
        new_block = Block(len(self.chain), latest_block.hash, new_data)
        self.chain.append(new_block)

    def print_chain(self):
        for block in self.chain:
            print(f"Block {block.index}:")
            print(f"Timestamp: {time.ctime(block.timestamp)}")
            print(f"Data: {block.data}")
            print(f"Previous Hash: {block.previous_hash}")
            print(f"Hash: {block.hash}\n")

# Simulating the supply chain
pharma_blockchain = Blockchain()

# Adding blocks to simulate drug movement in the supply chain
pharma_blockchain.add_block("Manufactured by Company A")
pharma_blockchain.add_block("Shipped to Wholesaler B")
pharma_blockchain.add_block("Distributed to Retailer C")
pharma_blockchain.add_block("Sold to Consumer D")

# Output the blockchain details
pharma_blockchain.print_chain()
